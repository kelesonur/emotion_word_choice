View(df_Turkey)
# Let R print the year column in df_turkey to see for which years data is available
df_Turkey$year
# load ggplot2
library(ggplot2)
ggplot(df_Turkey, aes(country, year)+
geom_point)
# Use View() to inspect them
View(df_Turkey)
ggplot(df_Turkey, aes(year, population)+
geom_point)
ggplot(df_Turkey, aes(year, population)+
geom_point()
ggplot(df_Turkey, aes(year, population) +
geom_point()
# Use View() to inspect them
View(df_Turkey)
ggplot(df_Turkey, aes(x= year, y= population) +
geom_point()
library(ggplot2)
ggplot(df_Turkey, aes(x= year, y= population) +
geom_point()
ggplot(df_Turkey, aes(x= year, y= population) +
geom_point())
ggplot(df_Turkey, aes(x= year, y= population) +
geom_point()
)
ggplot(df_Turkey, aes(x= year, y= population)) +
geom_point()
ggplot(df_Ukraine, aes(x= year, y= population)) +
geom_point()
# Using rbind(), create a single data frame called df_trukr containing both datasets
rbind(df_Turkey, df_Ukraine)
# Using rbind(), create a single data frame called df_trukr containing both datasets
df_trukr <- rbind(df_Turkey, df_Ukraine)
ggplot(df_trukr, aes(x= year, y= population, color = country)) +
geom_bar(stat = "identity")
ggplot(df_trukr, aes(x= year, y= population, fill = country)) +
geom_bar(stat = "identity")
ggplot(df_trukr, aes(x= year, y= population, color = country)) +
geom_point()
ggplot(df_trukr, aes(x= year, y= population)) +
geom_point() +
facet_wrap(~country)
df_trukr
change <-df_trukr %>%
group_by(country) %>%
summarize(population[38] - population[1])
change
population[38]
df_trukr$population[38]
change <-df_trukr %>%
group_by(country) %>%
summarize(df_trukr$population[38] - df_trukr$population[1])
change
(df_trukr$population[38]
df_trukr$population[38]
df_trukr$population
change <-df_trukr %>%
group_by(country) %>%
summarize(df_trukr$population[1] - df_trukr$population[38])
change
# plot both in one plot, in two facets
ggplot(df_trukr, aes(x= year, y= population, color = country)) +
geom_point() + geom_line()
facet_wrap(~country)
# plot both in one plot, in two facets
ggplot(df_trukr, aes(x= year, y= population, fill = country)) +
geom_point() +
geom_line() +
facet_wrap(~country)
# plot both in one plot, in two facets
ggplot(df_trukr, aes(x= year, y= population, color = country)) +
geom_point() +
geom_line() +
facet_wrap(~country)
danish_summary
###
### Please consider this assignment a type of translation task. Translate each of the
### statements below from English to R. Each instruction should correspond to 1-3 lines
### of code (usually one line).
### Please note that there may be multiple, equally valid solutions to each instruction.
###
### After you finish the assignment, please click on "Session"->"Restart R" in your R Studio
### and run the code again, to make sure it executes properly in *exactly* the order in which
### you have written it. (The most common error is that people don't load packages later than
### they should be loaded, or leave install.packages() calls in this R code. )
###
### Each statement is worth 1 point.
###
# subtract 15 from 1
1 - 15
# create a vector called my_vector, and fill it with all integers from 1 to 10
my_vector <- 1L:10L
# add 5 to my_vector
my_vector + 5
# determine which elements of the expression (my_vector^10) are smaller than 50
my_vector^10 < 50
my_vector[my_vector^10 < 50]
# create a vector called z containing the values 8, 18, and 38
z <- c(8,18,38)
# using the vector called letters which is already available in R, extract the 6-th,7-th, and 9th letter
letters[c(6,7,9)]
# Create a data frame called df with the columns A and B. Let A contain the numbers from 1 to 5, and B the letters from 'a' to 'e'.
# (Use the function data.frame().)
df <- data.frame(A = 1:5, B = letters[1:5])
# load the package called 'languageR' and take a look at the first few columns of the data set called danish
library(languageR)
head(danish)
# use the function help() to look up the documentation
help(danish)
# load the package dplyr, and compute the average value of the column Log-RT by sex (look up the actual name of the columns in the dataset documentation)
library(dplyr)
danish_summary <- danish %>%
group_by(Sex) %>%
summarise(mean_LogRT = mean(LogRT)
)
danish_summary
seviye <- rep(c(A,B,C,D,E),2)
seviye <- rep(c("A","B","C","D","E"),2)
seviye
seviye <- rep(LETTERS[1:5],2)
seviye
# puan adında bir tane vektör oluşturun ve bu vektör şu değerleri içersin:
# 100, 95, 80, 75, 60, 95, 90, 75, 65, 55
puan <- c(100, 95, 80, 75, 60, 95, 90, 75, 65, 55)
# yas adında bir tane dah vektör oluşturun ve
# bu vektör şu değerleri içersin: 18, 16, 14, 12, 10, 21, 17, 15, 12, 9
yas <- c(18, 16, 14, 12, 10, 21, 17, 15, 12, 9)
# bu vektörlerden notlar adında bir veri çerçevesi oluşturun.
notlar <- data.frame(puan, seviye, yas)
View(notlar)
notlarplot <- ggplot(notlar, aes(x = seviye, y = puan)) +
geom_bar(stat = "identity")
library(ggplot2)
notlarplot <- ggplot(notlar, aes(x = seviye, y = puan)) +
geom_bar(stat = "identity")
notlarplot
# general libraries
library(dplyr) # magic
library(magrittr) # piped magic
library(tidyr) # dark magic
library(ggplot2) # plots things
theme_set(theme_bw()) # set ggplot theme
library(extrafont) # Times font for plot use
font_import(pattern = "Times New Roman", prompt = F)
loadfonts()
library(readxl) # reads excel files
library(gdata) # some functions here and there
library(stringr) # good with regular expressions
# statistics
library(brms) # bayesian regression
library(bayesplot) # plot bayes models as ggplot objects
library(tidybayes) # fairy dust for bayes
bayesplot_theme_set(new = theme_bw()) # set plot view
library(modelr)
#library(tidybayes)
#library(rstan)
#library(StanHeaders)
library(MASS)
dfjapan <- read_excel("emotion_ills.xlsx") %>% drop_na()
setwd("~/GitHub/emotion_word_choice")
dfjapan <- read_excel("emotion_ills.xlsx") %>% drop_na()
dfjapan$Culture %<>% dplyr::recode('1' = "German", '2' = "Turkish", '3' = "Japanese")
# encode vector types
dfjapan$Subject %<>% as.integer()
dfjapan$Culture %<>%  as.factor() %>%  reorder.factor(new.order = c("Turkish","German", "Japanese"))
dfjapan$Question %<>% as.factor()
dfjapan$Dyad %<>% as.factor()
dfjapan$Emotion1_GALC %<>% as.factor()
dfjapan$Arousal_ANEW %<>%  as.factor() %>% reorder.factor(new.order = c("Low","High"))
dfjapan$Dominance_ANEW %<>% as.factor() %>% reorder.factor(new.order = c("Low","High"))
df_model <- dfjapan %>% dplyr::select(Subject, Culture, Question, Arousal_ANEW, Dominance_ANEW)
df_nomix <- dfjapan %>% subset(Dyad != "Conflict") %>% subset(Emotion1_GALC %in% c("Happiness", "Anger", "Disappointment", "Anxiety", "Shame", "Feelinglove", "Guilt", "Pride", "Sadness", "Gratitude", "Positive", "Contentment"))
# set contrasts for the model#
contrasts(df_nomix$Culture) <- contr.sdif(3)
contrasts(df_nomix$Dominance_ANEW) <- contr.sdif(2)
contrasts(df_nomix$Arousal_ANEW) <- contr.sdif(2)
culturem1 <- brm(Dominance_ANEW  ~ Culture,
family = bernoulli(link = "logit"), data = df_nomix,
chains = 4, cores = 4)
culturem2 <- brm(Arousal_ANEW ~ Culture + Dominance_ANEW,
family = bernoulli(link = "logit"), data = df_nomix,
chains = 4, cores = 4)
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "German vs. Turkish",
b_CultureJapanese  = "Japanese vs. Turkish",
b_Dominance_ANEWHigh = "High Dominance",)
dfculture_m1$parameter %<>% reorder.factor(new.order = c("High Dominance", "Japanese vs. Turkish", "German vs. Turkish"))
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "Alman - Türk",
b_CultureJapanese  = "Japon - Türk",
b_Dominance_ANEWHigh = "Yüksek Baskınlık",)
dfculture_m1$parameter %<>% reorder.factor(new.order = c("High Dominance", "Japanese vs. Turkish", "German vs. Turkish"))
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "Alman - Türk",
b_CultureJapanese  = "Japon - Türk",
b_Dominance_ANEWHigh = "Yüksek Baskınlık",)
dfculture_m1$parameter %<>% reorder.factor(new.order = c("Yüksek Baskınlık", "Japon - Türk", "Alman - Türk"))
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p4 <- dfculture_m1 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1, 3.90)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=15))
p4
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "Alman vs. Türk",
b_CultureJapanese  = "Japon vs.Türk",
b_Dominance_ANEWHigh = "Yüksek Baskınlık",)
dfculture_m1$parameter %<>% reorder.factor(new.order = c("Yüksek Baskınlık", "Japon vs. Türk", "Alman vs. Türk"))
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p4 <- dfculture_m1 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1, 3.90)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=15))
p4
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
dfculture_m1
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "Alman vs. Türk",
b_CultureJapanese  = "Japon vs.Türk",
b_Dominance_ANEWHigh = "Yüksek Baskınlık",)
dfculture_m1
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "Alman vs. Turk",
b_CultureJapanese  = "Japon vs.Türk",
b_Dominance_ANEWHigh = "Yüksek Baskınlık",)
dfculture_m1
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_CultureGerman = "Alman",
b_CultureJapanese  = "Japon",
b_Dominance_ANEWHigh = "Yuksek Baskinlik",)
dfculture_m1
dfculture_m1$parameter
culturem2 <- brm(Arousal_ANEW ~ Culture + Dominance_ANEW,
family = bernoulli(link = "logit"), data = df_nomix,
chains = 4, cores = 4, file = "culturem2")
,
dfculture_m1
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_Culture2M1 = "Alman - Türk",
b_CultureJapanese3M2  = "Japon - Türk",
b_Dominance_ANEWHigh2M1 = "Yüksek Baskınlık",)
dfculture_m1$parameter %<>% reorder.factor(new.order = c("Yüksek Baskınlık", "Japon - Türk", "Alman - Türk"))
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p4 <- dfculture_m1 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1, 3.90)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=15))
p4
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p4 <- dfculture_m1 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1.5, 3.90)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=15))
p4
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_Culture2M1 = "Alman - Türk",
b_CultureJapanese3M2  = "Japon - Türk",
b_Dominance_ANEWHigh2M1 = "Yüksek Baskınlık")
dfculture_m1
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m1 <- mcmc_intervals_data(culturem2, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
# recoding the predictor estimate. SPECIAL
dfculture_m1$parameter %<>% dplyr::recode(b_Culture2M1 = "Alman - Türk",
b_Culture3M2  = "Japon - Türk",
b_Dominance_ANEW2M1 = "Yüksek Baskınlık")
dfculture_m1$parameter %<>% reorder.factor(new.order = c("Yüksek Baskınlık", "Japon - Türk", "Alman - Türk"))
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p4 <- dfculture_m1 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1.5, 3.90)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=15))
p4
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p4 <- dfculture_m1 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1.5, 3.90)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=20))
ggsave("p4_ills.png", plot = p4, width = 6, height = 6)
# creating a df for the model results with the mcmc_intervals_data function. I included only the predictor estimate. SPECIAL
dfculture_m2 <- mcmc_intervals_data(culturem1, pars = vars(starts_with("b_"))) %>% subset(parameter != "b_Intercept")
dfculture_m2
# recoding the predictor estimate. SPECIAL
dfculture_m2$parameter %<>% dplyr::recode(b_Culture2M1 = "Alman - Türk",
b_Culture3M2  = "Japon - Türk")
dfculture_m2$parameter %<>% reorder.factor(new.order = c("Japon - Türk", "Alman - Türk"))
# plotting the model plot with credible intervals, and a dashed vertical line at the intercept (0). SPECIAL. Modele plot yapmak zorundna değilsin
p5 <- dfculture_m2 %>% ggplot(aes(m, parameter)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = l, xmax = h), alpha = 1, height = 0, size = 2) +
geom_errorbarh(aes(xmin = ll, xmax = hh, height = 0)) +
geom_vline(xintercept = 0, linetype = "dashed", size = 1, colour = "black") +
theme_minimal() +
scale_x_continuous(limits = c(-1, 1)) +
xlab("Tahmin (log)") + ylab("Katsayılar") +
theme(text=element_text(size=20))
p5
ggsave("p5_ills.png", plot = p5, width = 6, height = 6)
task <- search_tweets("yourself", lang = "en", n = 2000, include_rts = FALSE)
library(plyr)
library(stringr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(readr)
library(rtweet)
library(tidytext)
library(wordcloud2)
library(stopwords)
library(coreNLP)
library("tm")
library(textdata)
library(ggpubr)
library("twtools")
library("cld3")
#Twitter Sentime
task <- search_tweets("yourself", lang = "en", n = 50, include_rts = FALSE)
library(purrr)
library(plyr)
library(stringr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(readr)
library(rtweet)
library(tidytext)
library(wordcloud2)
library(stopwords)
library(coreNLP)
library("tm")
library(textdata)
library(ggpubr)
library("twtools")
library("cld3")
token <- create_token(
app = "emotion_word_Choice",
consumer_key = "AEYwRtC2MAs0rHTVJDVFcoNxH" ,
consumer_secret = "G29Dsn52uwHRoDYyfjD3wp2Y5TCY4MXT5W3In8GEycbCByK1Um",
access_token = "1271698632933285888-7GZcw5mY5bMolnNPekt0yDOD9eiiFt",
access_secret = "oUmwnriJ7H4LuvXfxp91p9KUYDfL3x47HrCYKFU0cbTNu")
task <- search_tweets("yourself", lang = "en", n = 50, include_rts = FALSE
onurtable <- onurtable %>%
count(word, sort = TRUE)
task <- search_tweets("yourself", lang = "en", n = 50, include_rts = FALSE)
View(task)
#Twitter Sentiment Analysis / NLP
?clean_tweets()
library(purrr)
library(plyr)
library(stringr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(readr)
library(rtweet)
library(tidytext)
library(wordcloud2)
library(stopwords)
library(coreNLP)
library("tm")
library(textdata)
library(ggpubr)
library("twtools")
library("cld3")
#Twitter Sentiment Analysis / NLP
?clean_tweets()
library("twtools")
library(twtools)
install.packages("twtools")
library("twtools")
library(twtools)
remotes::install_github("seanchrismurphy/twtools")
library("seanchrismurphy/twtools")
onurdf$text <- clean_tweets(onurdf$text)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("seanchrismurphy/twtools")
remotes::install_github("seanchrismurphy/twtools")
#Twitter Sentiment Analysis / NLP
?clean_tweets()
# packages
?purr
# packages
?tm_map()
# packages
?tm_map()
library(purrr)
# packages
?tm_map()
# packages
?tm_map
View(stop_words)
stop_words
# packages
?unnest_tokens()
library(tidytext) #unnest_tokens
# packages
?unnest_tokens()
?anti_join
?removeNumbers()
# packages
library(purrr) # could use for data cleaning
library(stringr) # str_replace_all function, data cleaning
library(dplyr) # anti_join
library(magrittr) # pipe %>%
library(ggplot2) # visuals
library(readr) # read data frames
library(rtweet) # Twitter magic
library(tidytext) #unnest_tokens
library(wordcloud2)
library(stopwords)
library(coreNLP)
library(textdata)
library(ggpubr)
library("seanchrismurphy/twtools") # clean_tweets()
library("cld3")
?removeNumbers()
?inner_join()
en_sentiment
?count()
?ungroup()
library(stopwords)
# packages
stopwords
# packages
stopwords()
token <- create_token(
app = "emotion_word_Choice",
consumer_key = "AEYwRtC2MAs0rHTVJDVFcoNxH" ,
consumer_secret = "G29Dsn52uwHRoDYyfjD3wp2Y5TCY4MXT5W3In8GEycbCByK1Um",
access_token = "1271698632933285888-7GZcw5mY5bMolnNPekt0yDOD9eiiFt",
access_secret = "oUmwnriJ7H4LuvXfxp91p9KUYDfL3x47HrCYKFU0cbTNu")
library(purrr) # could use for data cleaning
library(stringr) # str_replace_all function, data cleaning
library(dplyr) # anti_join, inner_join, count, ungroup
library(magrittr) # pipe %>%
library(ggplot2) # visuals
library(readr) # read data frames
library(rtweet) # Twitter magic
library(tidytext) #unnest_tokens
library(wordcloud2)
library(stopwords)
library(coreNLP)# nlp stuff
library(textdata) # lexicons
library(ggpubr) # combine plots
library(tm) # removeNumbers()
library("seanchrismurphy/twtools") # clean_tweets()
library("cld3")
token <- create_token(
app = "emotion_word_Choice",
consumer_key = "AEYwRtC2MAs0rHTVJDVFcoNxH" ,
consumer_secret = "G29Dsn52uwHRoDYyfjD3wp2Y5TCY4MXT5W3In8GEycbCByK1Um",
access_token = "1271698632933285888-7GZcw5mY5bMolnNPekt0yDOD9eiiFt",
access_secret = "oUmwnriJ7H4LuvXfxp91p9KUYDfL3x47HrCYKFU0cbTNu")
Lexicon <- read_delim(file = "Turkish-tr-NRC-VAD-Lexicon.txt", "\t",
locale = locale(date_names = "tr", encoding = "UTF-8"))
library(readr) # read data frames
Lexicon <- read_delim(file = "Turkish-tr-NRC-VAD-Lexicon.txt", "\t",
locale = locale(date_names = "tr", encoding = "UTF-8"))
library(readr) # read data frames
install.packages("readr")# read data frames
library(readr)
Lexicon <- read_delim(file = "Turkish-tr-NRC-VAD-Lexicon.txt", "\t",
locale = locale(date_names = "tr", encoding = "UTF-8"))
library("readr")
library(readr)
